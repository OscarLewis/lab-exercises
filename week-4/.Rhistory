setwd("C:/Users/Oscar/Desktop/School/info201/lab-exercises/week-4")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team.data <- read.csv(file = "data/teams.csv")
View(team.data)
# Exercise 7: DPLYR practice with NBA data
# install.packages("dplyr")
library(dplyr)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team.data <- mutate(team.data, turnovers to steals = TOV /STL)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team.data <- mutate(team.data, turnovers_to_steals = TOV /STL)
# Sort the teams from lowest turnover/steal ratio to highest
arrange(team.data, turnovers_to_steals)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
filter(team.data, TRB == max(TRB)) %>% select(Team, TRB)
# Print only the name of the team that had the highest total rebounds
# (that also happens to be the greatest team of all time)
print(most_TRB_team$Name)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
most_TRB_team <- filter(team.data, TRB == max(TRB)) %>% select(Team, TRB)
# Print only the name of the team that had the highest total rebounds
# (that also happens to be the greatest team of all time)
print(most_TRB_team$Name)
# Print only the name of the team that had the highest total rebounds
# (that also happens to be the greatest team of all time)
print(most_TRB_team$Team)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
most_TRB_team <- select(filter(team.data, TRB == max(TRB)), Team, TRB)
# Print only the name of the team that had the highest total rebounds
# (that also happens to be the greatest team of all time)
print(most_TRB_team$Team)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team.data <- read.csv(file = "data/teams.csv", stringsAsFactors = FALSE)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
most_TRB_team <- select(filter(team.data, TRB == max(TRB)), Team, TRB)
# Print only the name of the team that had the highest total rebounds
# (that also happens to be the greatest team of all time)
print(most_TRB_team$Team)
team.data %>%
filter(name == "Oklahoma City Thunder*") %>%
select(Team) <- "Seattle Supersonics"
team.data %>%
filter(Team == "Oklahoma City Thunder*") %>%
select(Team) <- "Seattle Supersonics"
seattle <- filter(team.data, Team = "Oklahoma City Thunder*")
seattle$Team
# Print only the name of the team that had the highest total rebounds
# (that also happens to be the greatest team of all time)
seattle <- filter(team.data, Team = "Oklahoma City Thunder*")
# Print only the name of the team that had the highest total rebounds
# (that also happens to be the greatest team of all time)
seattle <- filter(team.data, Team == "Oklahoma City Thunder*")
seattle$Team
seattle$Team <- "Seattle Supersonics"
print(most_TRB_team$Team)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
most_TRB_team <- select(filter(team.data, TRB == max(TRB)), Team, TRB)
print(most_TRB_team$Team)
team.data[team.data$Team == "Oklahoma City Thunder*", ]
team.data[team.data$Team == "Oklahoma City Thunder*", ]$Team <- "Seattle Supersonics"
source('C:/Users/Oscar/Desktop/School/info201/lab-exercises/week-4/exericse.R', echo=TRUE)
print(most_TRB_team$Team)
write.csv(file = "data/teams.csv")
write.csv(team.data, file = "data/teams.csv")
pokemon <- read.csv(file = "data/Pokemon.csv", stringsAsFactors = FALSE)
# First, View() the data set to see what info you have to work with
View(pokemon)
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
electric.pkm <- pokemon %>% filter(type = "Electric")
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
electric.pkm <- pokemon %>% filter(type == "Electric")
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
electric.pkm <- pokemon %>% filter(Type 1 == "Electric")
View(pokemon)
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
electric.pkm <- pokemon %>% filter(Type.1 == "Electric")
View(electric.pkm)
# Group the pokemon by Type 2 and save into a descriptive variable.
electric.pkm %>% group_by(Type.2)
# Group the pokemon by Type 2 and save into a descriptive variable.
View(electric.pkm %>% group_by(Type.2))
# Group the pokemon by Type 2 and save into a descriptive variable.
type2_group <- electric.pkm %>% group_by(Type.2)
View(type2_group)
# Use summarize() to figure out what the mean (average) speed is for
# each different type in type 2 and what the maximum HP (health point) value is
# within each group.
type2_group %>%summarize("Mean Speed" = mean(Speed))
# Use summarize() to figure out what the mean (average) speed is for
# each different type in type 2 and what the maximum HP (health point) value is
# within each group.
type2_group %>%summarize("Mean Speed" = mean(Speed), "Max HP" = max(HP))
# Use summarize() to figure out what the mean (average) speed is for
# each different type in type 2 and what the maximum HP (health point) value is
# within each group.
type2_stats <- type2_group %>%summarize("Mean Speed" = mean(Speed), "Max HP" = max(HP))
# New pokemon are released in generations. Aggregate the data on generations
# using summarize() to look at the minimum and maximum attack and defense values
# across generations for Pokemon that are not "Legendary".
pokemon %>%
filter(Legendary = FALSE) %>%
group_by(Generation) %>%
summarize("Min Attack" = min(Attack), "Max Attack" = max(Attack), "Min Defense" = min(Defense), "Max Defense" = max(Defense))
pokemon %>%
filter(Legendary == FALSE) %>%
group_by(Generation) %>%
summarize("Min Attack" = min(Attack), "Max Attack" = max(Attack), "Min Defense" = min(Defense), "Max Defense" = max(Defense))
generation_stats <- pokemon %>%
filter(Legendary == FALSE) %>%
group_by(Generation) %>%
summarize("Min Attack" = min(Attack), "Max Attack" = max(Attack), "Min Defense" = min(Defense), "Max Defense" = max(Defense))
generation_stats
generation_stats <- pokemon %>%
filter(Legendary == "FALSE") %>%
group_by(Generation) %>%
summarize("Min Attack" = min(Attack), "Max Attack" = max(Attack),
"Min Defense" = min(Defense), "Max Defense" = max(Defense))
generation_stats
generation_stats <- pokemon %>%
filter(Legendary == "False") %>%
group_by(Generation) %>%
summarize("Min Attack" = min(Attack), "Max Attack" = max(Attack),
"Min Defense" = min(Defense), "Max Defense" = max(Defense))
generation_stats
